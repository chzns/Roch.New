
--1.创建模板VUE 文件

<template>
  <el-dialog id="dialog_upload"
             :title=" $t('BatchSearch')"
             width="60%"
             height="100%"
             @close="cancelDialog()"
             ref="dataForm"
             :visible.sync="uploaddialogOpen">
    <!-- <div class="app-container"> -->
    <el-card class="box-card">
      <el-form label-position="left">
        <el-row>
          <!-- <el-col :span="24">
            <el-radio-group v-model="upload_type">
              <el-radio :label="1">{{ $t('Lastest')}} </el-radio>
              <el-radio :label="2">{{$t('Includehistory')}}</el-radio>
            </el-radio-group>
          </el-col> -->
          <el-col :span="24">
            <upload-excel-component @on-selected-file="selected"
                                    :before-upload="beforeUpload" />
          </el-col>
        </el-row>
        <el-row>
          <el-table :data="tableData"
                    height="250"
                    id="tableID"
                    highlight-current-row
                    style="width: 100%;margin-top:10px;">
            <el-table-column prop="ValidMsg"
                             label="Status"
                             width="350">
              <template slot-scope="scope">
                <span style="color:#F00"
                      v-show="scope.row.ValidMsg!==''||scope.row.ValidMsg!=='NULL'||scope.row.ValidMsg!==NULL "> {{ scope.row.ValidMsg }}</span>
              </template>
            </el-table-column>
            <el-table-column v-for="item of exPortHeader"
                             width="200"
                             :prop="item.field"
                             :label="item.headerName"
                             :key="item.headerName" />
          </el-table>
        </el-row>
      </el-form>
    </el-card>
    <!-- <el-row> -->
    <span slot="footer"
          class="dialog-footer">
      <!-- <el-col :span="24"> -->
      <el-button type="primary"
                 @click="DownloadProcessCodeData()">
        <i class="el-icon-download"></i><span>Excel</span>
      </el-button>
      <el-button title="Reset"
                 type="primary"
                 @click="submit()">
        {{
            $t('submit')
            }}
      </el-button>
      <el-button type="primary"
                 v-show="false"
                 @click="onDownloadClicked()"
                 icon="el-icon-search">{{ $t("batchSearch") }}</el-button>
      <el-button title="Cancel"
                 type="primary"
                 @click="cancel()">{{ $t("cancel") }} </el-button>
      <!-- </el-col> -->
    </span>
    <!-- </el-row> -->
    <!-- </div> -->
  </el-dialog>
</template>
<script>
  import dataHeader_ from './dataHeader.vue'
  import UploadExcelComponent from '@/components/UploadExcel/index.vue'
  import headerCompare from '@/components/UploadExcel/headerCompare'
  import { BulkProcessCodeData, BulkConfirmProcessCodeData, GetProcessCodeData } from '@/api/app/ProcessCodeDataApi'
  import { DownloadProcessCodeData } from '@/api/app/JobAssignmentMainApi'
  export default {
    components: { UploadExcelComponent, headerCompare },
    data() {
      return {
        upload_type: 1,
        ImportData: [],
        bulkInsErrorCnt: 0,
        uploaddialogOpen: false,
        tableData: [],
        exPortHeader: dataHeader_.exPortSearchFitler
      }
    },
    props: {
      fatherMethod: {
        type: Function,
        default: null
      }
    },
    created() {
      this.reset_upload()
      this.exPortHeader = []
    },
    methods: {
      DownloadProcessCodeData() {
        var data = { SizingWeek: this.Search_Form.SizingWeek, PersonnelArea: this.Search_Form.PersonnelArea, SearchType: '' }
        DownloadProcessCodeData(data).then(response => {
          console.log('onDownloadClicked')
          const downloadUrl = window.URL.createObjectURL(new Blob([response.data]))
          const link = document.createElement('a')
          link.href = downloadUrl
          link.setAttribute('download', 'Change Approver.xlsx')
          document.body.appendChild(link)
          link.click()
          link.remove()
          this.loading = false
        }).catch(error => {
          this.loading = false
          console.log('Excel Error')
          console.log(error)
          this.$alert(error, this.$t('Enfo'), {
            confirmButtonText: 'OK',
            dangerouslyUseHTMLString: true
          })
        })
        console.log('onDownloadClicked')
      },
      BulkProcessCodeData(data) {
        BulkProcessCodeData(data).then(response => {
          console.log('DL_Bulk_BlackListApprover')
          console.log(response.data)
          this.bulkInsErrorCnt = response.data
          this.GetProcessCodeData()
        })
      },
      BulkConfirmProcessCodeData(data) {
        BulkConfirmProcessCodeData(data).then(response => {
          console.log(response.data)
          if (response.data !== '') {
            this.$message.warning(response.data)
          } else {
            this.uploaddialogOpen = false
            this.fatherMethod()
            this.reset_upload()
            this.$message.success('Uploaded Success')
          }
        })
      },
      beforeUpload() {
        console.log('beforeUpload')
      },
      Headervalidate() {
        var bo = true
        console.log('Excelvalidate')
        var dbHeader = []
        this.ImportData = []
        var k = 0
        for (let index = 0; index < this.exPortHeader.length; index++) {
          const element = this.exPortHeader[index]
          if (element.hide === false || element.hide === undefined) {
            dbHeader.push({ SourceName: element.headerName, DestinationName: element.field, ColumnId: k })
            k = k + 1
            console.log(element.field)
            console.log(index)
            console.log(element.hide)
            console.log(element.headerName)
          }
        }
        var result = headerCompare.compareHeader(
          this.tableHeader,
          JSON.stringify(this.tableData),
          dbHeader
        )
        console.log('----')
        console.log(this.tableHeader)
        console.log(dbHeader)
        this.ImportData = JSON.parse(result.result)
        console.log(this.ImportData)
        if (result.errorMsg !== undefined && result.errorMsg !== '') {
          bo = false
          this.$notify.error({
            title: this.$t('error'),
            message: result.errorMsg
          })
        }
        console.log('xxxx')
        console.log(bo)
        return bo
      },
      selected(data) {
        var results = data.results[Object.keys(data.results)[0]]
        var header = data.header[Object.keys(data.results)[0]]
        this.tableData = results
        this.tableHeader = header
        console.log('tableData')
        console.log(this.tableData)
        console.log('tableHeader')
        console.log(this.tableHeader)
        if (this.Headervalidate() === true) {
          this.beforesubmit()
        } else {
          this.tableData = []
          this.tableHeader = []
        }
      },
      GetProcessCodeData() {
        var data = { SearchType: 'Upload', Update_Type: 'Search' }
        GetProcessCodeData(data).then(response => {
          this.tableData = response.data
          console.log('GetProcessCodeData')
          console.log(this.tableData)
        })
      },
      beforesubmit() {
        var data = { SearchFiters: this.ImportData, Update_Type: this.upload_type }
        GetProcessCodeData(data).then(response => {
          console.log('GetProcessCodeData')
          console.log(response.data)
          this.bulkInsErrorCnt = response.data
          this.GetProcessCodeData()
        })
      },
      cancelDialog() {
        this.uploaddialogOpen = false
        this.reset_upload()
      },
      submit() {
        if (this.tableData === [] || this.tableData === undefined || this.tableData.length === 0) {
          this.$notify.warning({
            title: this.$t('warning'),
            message: this.$t('Please select Excel files first')
          })
        } else {
          if (this.bulkInsErrorCnt > 0) {
            this.$notify.warning({
              title: this.$t('warning'),
              message: this.$t('Upload Fail (' + this.bulkInsErrorCnt.toString() + ')')
            })
          } else {
            // this.fatherMethod()
          }
        }
      },
      cancel() {
        this.uploaddialogOpen = false
        console.log('cancel')
      },
      reset_upload() {
        this.bulkInsErrorCnt = 0
        this.BL_Get_BatchSearch()
      },
      reset() {
        var data = { SearchType: 'Upload', Update_Type: 'reset' }
        GetProcessCodeData(data).then(response => {
          this.tableData = response.data
          console.log('GetProcessCodeData')
          console.log(this.tableData)
        })
      }
    }
  }
</script>
<style scoped>
</style>


--2.从主画面引入路径
  import $component_name$ from './components/SearchFilter/$component_name$'

  export default {
    components: {
      $component_name$
    }

  <$component_name$ ref="$component_name$"
                    :fatherMethod="father_$component_name$"></$component_name$>

  father_$component_name$() {
        this.$refs.$component_name$.uploaddialogOpen = false
        console.log('father_$component_name$')
      },

 upload() {
        this.$nextTick(() => {
          this.$refs.uploadProcessCodeData.uploaddialogOpen = true
          console.log('nextTick')
        })
      },